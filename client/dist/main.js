(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _viewer = require('./viewer');

var _viewer2 = _interopRequireDefault(_viewer);

var _modelPresenter = require('./model-presenter');

var _modelPresenter2 = _interopRequireDefault(_modelPresenter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* global io */

var socket = io('http://localhost:3000');
var viewer = new _viewer2.default();

var sceneEl = document.getElementById('scene');
var modelPresenter = new _modelPresenter2.default(sceneEl, 640, 480);

modelPresenter.render();

socket.on('frame', function (data) {
  var _data$coords = data.coords,
      x = _data$coords.x,
      y = _data$coords.y;


  viewer.update(data);

  modelPresenter.updateModelPos(x, y);
});

},{"./model-presenter":2,"./viewer":3}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* global THREE */

var ModelPresenter = function () {
  function ModelPresenter(targetEl, width, height) {
    var _this = this;

    _classCallCheck(this, ModelPresenter);

    this.render = function () {
      _this.renderer.setClearColor(0x000000, 0);
      _this.renderer.render(_this.scene, _this.camera);

      requestAnimationFrame(_this.render);
    };

    this.targetEl = targetEl;
    this.width = width;
    this.height = height;

    this.scene = new THREE.Scene();
    this.camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 1000);
    this.camera.position.set(0, 0, 50);

    this.position = {
      x: 0,
      y: 0
    };

    this.init();
    this.initLight();
    this.initPlane();
    this.loadModel();
  }

  _createClass(ModelPresenter, [{
    key: 'init',
    value: function init() {
      this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
      this.renderer.setSize(this.width, this.height);
      this.renderer.shadowMap.enabled = true;
      this.targetEl.appendChild(this.renderer.domElement);
    }
  }, {
    key: 'initLight',
    value: function initLight() {
      this.light = new THREE.SpotLight(0xffffff);
      this.light.position.set(50, 100, 1000);
      this.light.castShadow = true;
      this.scene.add(this.light);
    }
  }, {
    key: 'initPlane',
    value: function initPlane() {
      this.tmpGeometry = new THREE.PlaneGeometry(1000, 1000, 1, 1);
      this.tmpGeometry.position = new THREE.Vector3(0, 0, 0);
      this.tmpMesh = new THREE.Mesh(this.tmpGeometry);
    }
  }, {
    key: 'loadModel',
    value: function loadModel() {
      var _this2 = this;

      this.loader = new THREE.ColladaLoader();
      this.loader.load('/models/starwars-tie-fighter.dae', function (collada) {
        _this2.model = collada.scene;

        _this2.setSceneVisibility(false);

        _this2.scene.add(_this2.model);
      });
    }
  }, {
    key: 'mapCoords',
    value: function mapCoords() {
      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      var posX = x / this.width * 2 - 1;
      var posY = -(y / this.height) * 2 + 1;

      var ray = new THREE.Raycaster();
      ray.setFromCamera({ x: posX, y: posY }, this.camera);

      var intersects = ray.intersectObject(this.tmpMesh);

      return {
        x: intersects[0].point.x,
        y: intersects[0].point.y
      };
    }
  }, {
    key: 'updateModelPos',
    value: function updateModelPos(x, y) {
      var hasPosition = x && y;

      var _ref = hasPosition ? this.mapCoords(x, y) : this.position,
          posX = _ref.x,
          posY = _ref.y;

      if (this.model) {
        this.model.position.x = posX;
        this.model.position.y = posY;

        this.position.x = posX;
        this.position.y = posY;

        this.setSceneVisibility(hasPosition);
      }
    }
  }, {
    key: 'setSceneVisibility',
    value: function setSceneVisibility(isVisible) {
      this.renderer.domElement.style.visibility = isVisible ? 'visible' : 'hidden';
    }
  }]);

  return ModelPresenter;
}();

exports.default = ModelPresenter;

},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Viewer = function Viewer() {
  var _this = this;

  _classCallCheck(this, Viewer);

  this.update = function (_ref) {
    var buffer = _ref.buffer,
        coords = _ref.coords;

    var uint8Arr = new Uint8Array(buffer);
    var str = String.fromCharCode.apply(null, uint8Arr);
    var base64String = btoa(str);

    _this.image.onload = function () {
      _this.ctx.drawImage(_this.image, 0, 0, _this.canvas.width, _this.canvas.height);
      _this.ctx.beginPath();
      _this.ctx.strokeStyle = 'red';
      _this.ctx.strokeWidth = 1;
      _this.ctx.arc(coords.x, coords.y, coords.radius, 0, 2 * Math.PI);
      _this.ctx.stroke();
    };

    _this.image.src = 'data:image/png;base64,' + base64String;
  };

  this.canvas = document.getElementById('viewer');
  this.ctx = this.canvas.getContext('2d');
  this.image = new Image();

  this.canvas.width = 640;
  this.canvas.height = 480;
};

exports.default = Viewer;

},{}]},{},[1])

//# sourceMappingURL=data:application/json;charset=utf8;base64,
