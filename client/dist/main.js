(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _viewer = require('./viewer');

var _viewer2 = _interopRequireDefault(_viewer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var socket = io('http://localhost:3000'); /* global io */

var viewer = new _viewer2.default();

socket.on('frame', viewer.update);

},{"./viewer":2}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Viewer = function Viewer() {
  var _this = this;

  _classCallCheck(this, Viewer);

  this.update = function (_ref) {
    var buffer = _ref.buffer,
        coords = _ref.coords;

    var uint8Arr = new Uint8Array(buffer);
    var str = String.fromCharCode.apply(null, uint8Arr);
    var base64String = btoa(str);

    _this.image.onload = function () {
      _this.ctx.drawImage(_this.image, 0, 0, _this.canvas.width, _this.canvas.height);
      _this.ctx.beginPath();
      _this.ctx.strokeStyle = 'red';
      _this.ctx.strokeWidth = 1;
      _this.ctx.arc(coords.x, coords.y, coords.radius, 0, 2 * Math.PI);
      _this.ctx.stroke();
    };

    _this.image.src = 'data:image/png;base64,' + base64String;
  };

  this.canvas = document.getElementById('viewer');
  this.ctx = this.canvas.getContext('2d');
  this.image = new Image();

  this.canvas.width = 640;
  this.canvas.height = 480;
};

exports.default = Viewer;

},{}]},{},[1])

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjbGllbnQvc3JjL2FwcC5qcyIsImNsaWVudC9zcmMvdmlld2VyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfdmlld2VyID0gcmVxdWlyZSgnLi92aWV3ZXInKTtcblxudmFyIF92aWV3ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmlld2VyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHNvY2tldCA9IGlvKCdodHRwOi8vbG9jYWxob3N0OjMwMDAnKTsgLyogZ2xvYmFsIGlvICovXG5cbnZhciB2aWV3ZXIgPSBuZXcgX3ZpZXdlcjIuZGVmYXVsdCgpO1xuXG5zb2NrZXQub24oJ2ZyYW1lJywgdmlld2VyLnVwZGF0ZSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBWaWV3ZXIgPSBmdW5jdGlvbiBWaWV3ZXIoKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZpZXdlcik7XG5cbiAgdGhpcy51cGRhdGUgPSBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBidWZmZXIgPSBfcmVmLmJ1ZmZlcixcbiAgICAgICAgY29vcmRzID0gX3JlZi5jb29yZHM7XG5cbiAgICB2YXIgdWludDhBcnIgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgIHZhciBzdHIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIHVpbnQ4QXJyKTtcbiAgICB2YXIgYmFzZTY0U3RyaW5nID0gYnRvYShzdHIpO1xuXG4gICAgX3RoaXMuaW1hZ2Uub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuY3R4LmRyYXdJbWFnZShfdGhpcy5pbWFnZSwgMCwgMCwgX3RoaXMuY2FudmFzLndpZHRoLCBfdGhpcy5jYW52YXMuaGVpZ2h0KTtcbiAgICAgIF90aGlzLmN0eC5iZWdpblBhdGgoKTtcbiAgICAgIF90aGlzLmN0eC5zdHJva2VTdHlsZSA9ICdyZWQnO1xuICAgICAgX3RoaXMuY3R4LnN0cm9rZVdpZHRoID0gMTtcbiAgICAgIF90aGlzLmN0eC5hcmMoY29vcmRzLngsIGNvb3Jkcy55LCBjb29yZHMucmFkaXVzLCAwLCAyICogTWF0aC5QSSk7XG4gICAgICBfdGhpcy5jdHguc3Ryb2tlKCk7XG4gICAgfTtcblxuICAgIF90aGlzLmltYWdlLnNyYyA9ICdkYXRhOmltYWdlL3BuZztiYXNlNjQsJyArIGJhc2U2NFN0cmluZztcbiAgfTtcblxuICB0aGlzLmNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd2aWV3ZXInKTtcbiAgdGhpcy5jdHggPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICB0aGlzLmltYWdlID0gbmV3IEltYWdlKCk7XG5cbiAgdGhpcy5jYW52YXMud2lkdGggPSA2NDA7XG4gIHRoaXMuY2FudmFzLmhlaWdodCA9IDQ4MDtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFZpZXdlcjtcbiJdLCJwcmVFeGlzdGluZ0NvbW1lbnQiOiIvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5TFhCaFkyc3ZYM0J5Wld4MVpHVXVhbk1pTENKamJHbGxiblF2YzNKakwyRndjQzVxY3lJc0ltTnNhV1Z1ZEM5emNtTXZkbWxsZDJWeUxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGRFFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOaVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUtHWjFibU4wYVc5dUlHVW9kQ3h1TEhJcGUyWjFibU4wYVc5dUlITW9ieXgxS1h0cFppZ2hibHR2WFNsN2FXWW9JWFJiYjEwcGUzWmhjaUJoUFhSNWNHVnZaaUJ5WlhGMWFYSmxQVDFjSW1aMWJtTjBhVzl1WENJbUpuSmxjWFZwY21VN2FXWW9JWFVtSm1FcGNtVjBkWEp1SUdFb2J5d2hNQ2s3YVdZb2FTbHlaWFIxY200Z2FTaHZMQ0V3S1R0MllYSWdaajF1WlhjZ1JYSnliM0lvWENKRFlXNXViM1FnWm1sdVpDQnRiMlIxYkdVZ0oxd2lLMjhyWENJblhDSXBPM1JvY205M0lHWXVZMjlrWlQxY0lrMVBSRlZNUlY5T1QxUmZSazlWVGtSY0lpeG1mWFpoY2lCc1BXNWJiMTA5ZTJWNGNHOXlkSE02ZTMxOU8zUmJiMTFiTUYwdVkyRnNiQ2hzTG1WNGNHOXlkSE1zWm5WdVkzUnBiMjRvWlNsN2RtRnlJRzQ5ZEZ0dlhWc3hYVnRsWFR0eVpYUjFjbTRnY3lodVAyNDZaU2w5TEd3c2JDNWxlSEJ2Y25SekxHVXNkQ3h1TEhJcGZYSmxkSFZ5YmlCdVcyOWRMbVY0Y0c5eWRITjlkbUZ5SUdrOWRIbHdaVzltSUhKbGNYVnBjbVU5UFZ3aVpuVnVZM1JwYjI1Y0lpWW1jbVZ4ZFdseVpUdG1iM0lvZG1GeUlHODlNRHR2UEhJdWJHVnVaM1JvTzI4ckt5bHpLSEpiYjEwcE8zSmxkSFZ5YmlCemZTa2lMQ0luZFhObElITjBjbWxqZENjN1hHNWNiblpoY2lCZmRtbGxkMlZ5SUQwZ2NtVnhkV2x5WlNnbkxpOTJhV1YzWlhJbktUdGNibHh1ZG1GeUlGOTJhV1YzWlhJeUlEMGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENoZmRtbGxkMlZ5S1R0Y2JseHVablZ1WTNScGIyNGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENodlltb3BJSHNnY21WMGRYSnVJRzlpYWlBbUppQnZZbW91WDE5bGMwMXZaSFZzWlNBL0lHOWlhaUE2SUhzZ1pHVm1ZWFZzZERvZ2IySnFJSDA3SUgxY2JseHVkbUZ5SUhOdlkydGxkQ0E5SUdsdktDZG9kSFJ3T2k4dmJHOWpZV3hvYjNOME9qTXdNREFuS1RzZ0x5b2daMnh2WW1Gc0lHbHZJQ292WEc1Y2JuWmhjaUIyYVdWM1pYSWdQU0J1WlhjZ1gzWnBaWGRsY2pJdVpHVm1ZWFZzZENncE8xeHVYRzV6YjJOclpYUXViMjRvSjJaeVlXMWxKeXdnZG1sbGQyVnlMblZ3WkdGMFpTazdYRzRpTENJbmRYTmxJSE4wY21samRDYzdYRzVjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQmNJbDlmWlhOTmIyUjFiR1ZjSWl3Z2UxeHVJQ0IyWVd4MVpUb2dkSEoxWlZ4dWZTazdYRzVjYm1aMWJtTjBhVzl1SUY5amJHRnpjME5oYkd4RGFHVmpheWhwYm5OMFlXNWpaU3dnUTI5dWMzUnlkV04wYjNJcElIc2dhV1lnS0NFb2FXNXpkR0Z1WTJVZ2FXNXpkR0Z1WTJWdlppQkRiMjV6ZEhKMVkzUnZjaWtwSUhzZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaGNJa05oYm01dmRDQmpZV3hzSUdFZ1kyeGhjM01nWVhNZ1lTQm1kVzVqZEdsdmJsd2lLVHNnZlNCOVhHNWNiblpoY2lCV2FXVjNaWElnUFNCbWRXNWpkR2x2YmlCV2FXVjNaWElvS1NCN1hHNGdJSFpoY2lCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ1gyTnNZWE56UTJGc2JFTm9aV05yS0hSb2FYTXNJRlpwWlhkbGNpazdYRzVjYmlBZ2RHaHBjeTUxY0dSaGRHVWdQU0JtZFc1amRHbHZiaUFvWDNKbFppa2dlMXh1SUNBZ0lIWmhjaUJpZFdabVpYSWdQU0JmY21WbUxtSjFabVpsY2l4Y2JpQWdJQ0FnSUNBZ1kyOXZjbVJ6SUQwZ1gzSmxaaTVqYjI5eVpITTdYRzVjYmlBZ0lDQjJZWElnZFdsdWREaEJjbklnUFNCdVpYY2dWV2x1ZERoQmNuSmhlU2hpZFdabVpYSXBPMXh1SUNBZ0lIWmhjaUJ6ZEhJZ1BTQlRkSEpwYm1jdVpuSnZiVU5vWVhKRGIyUmxMbUZ3Y0d4NUtHNTFiR3dzSUhWcGJuUTRRWEp5S1R0Y2JpQWdJQ0IyWVhJZ1ltRnpaVFkwVTNSeWFXNW5JRDBnWW5SdllTaHpkSElwTzF4dVhHNGdJQ0FnWDNSb2FYTXVhVzFoWjJVdWIyNXNiMkZrSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdYM1JvYVhNdVkzUjRMbVJ5WVhkSmJXRm5aU2hmZEdocGN5NXBiV0ZuWlN3Z01Dd2dNQ3dnWDNSb2FYTXVZMkZ1ZG1GekxuZHBaSFJvTENCZmRHaHBjeTVqWVc1MllYTXVhR1ZwWjJoMEtUdGNiaUFnSUNBZ0lGOTBhR2x6TG1OMGVDNWlaV2RwYmxCaGRHZ29LVHRjYmlBZ0lDQWdJRjkwYUdsekxtTjBlQzV6ZEhKdmEyVlRkSGxzWlNBOUlDZHlaV1FuTzF4dUlDQWdJQ0FnWDNSb2FYTXVZM1I0TG5OMGNtOXJaVmRwWkhSb0lEMGdNVHRjYmlBZ0lDQWdJRjkwYUdsekxtTjBlQzVoY21Nb1kyOXZjbVJ6TG5nc0lHTnZiM0prY3k1NUxDQmpiMjl5WkhNdWNtRmthWFZ6TENBd0xDQXlJQ29nVFdGMGFDNVFTU2s3WEc0Z0lDQWdJQ0JmZEdocGN5NWpkSGd1YzNSeWIydGxLQ2s3WEc0Z0lDQWdmVHRjYmx4dUlDQWdJRjkwYUdsekxtbHRZV2RsTG5OeVl5QTlJQ2RrWVhSaE9tbHRZV2RsTDNCdVp6dGlZWE5sTmpRc0p5QXJJR0poYzJVMk5GTjBjbWx1Wnp0Y2JpQWdmVHRjYmx4dUlDQjBhR2x6TG1OaGJuWmhjeUE5SUdSdlkzVnRaVzUwTG1kbGRFVnNaVzFsYm5SQ2VVbGtLQ2QyYVdWM1pYSW5LVHRjYmlBZ2RHaHBjeTVqZEhnZ1BTQjBhR2x6TG1OaGJuWmhjeTVuWlhSRGIyNTBaWGgwS0NjeVpDY3BPMXh1SUNCMGFHbHpMbWx0WVdkbElEMGdibVYzSUVsdFlXZGxLQ2s3WEc1Y2JpQWdkR2hwY3k1allXNTJZWE11ZDJsa2RHZ2dQU0EyTkRBN1hHNGdJSFJvYVhNdVkyRnVkbUZ6TG1obGFXZG9kQ0E5SURRNE1EdGNibjA3WEc1Y2JtVjRjRzl5ZEhNdVpHVm1ZWFZzZENBOUlGWnBaWGRsY2p0Y2JpSmRmUT09In0=
